// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crawler/crawler.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CrawlRequest struct {
	Source               string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Urls                 []string `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlRequest) Reset()         { *m = CrawlRequest{} }
func (m *CrawlRequest) String() string { return proto.CompactTextString(m) }
func (*CrawlRequest) ProtoMessage()    {}
func (*CrawlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_951b7949eb1aa3c9, []int{0}
}

func (m *CrawlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlRequest.Unmarshal(m, b)
}
func (m *CrawlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlRequest.Marshal(b, m, deterministic)
}
func (m *CrawlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlRequest.Merge(m, src)
}
func (m *CrawlRequest) XXX_Size() int {
	return xxx_messageInfo_CrawlRequest.Size(m)
}
func (m *CrawlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlRequest proto.InternalMessageInfo

func (m *CrawlRequest) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *CrawlRequest) GetUrls() []string {
	if m != nil {
		return m.Urls
	}
	return nil
}

type CrawlResponse struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Data                 []*Song  `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrawlResponse) Reset()         { *m = CrawlResponse{} }
func (m *CrawlResponse) String() string { return proto.CompactTextString(m) }
func (*CrawlResponse) ProtoMessage()    {}
func (*CrawlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_951b7949eb1aa3c9, []int{1}
}

func (m *CrawlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CrawlResponse.Unmarshal(m, b)
}
func (m *CrawlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CrawlResponse.Marshal(b, m, deterministic)
}
func (m *CrawlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrawlResponse.Merge(m, src)
}
func (m *CrawlResponse) XXX_Size() int {
	return xxx_messageInfo_CrawlResponse.Size(m)
}
func (m *CrawlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CrawlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CrawlResponse proto.InternalMessageInfo

func (m *CrawlResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *CrawlResponse) GetData() []*Song {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*CrawlRequest)(nil), "crawler.CrawlRequest")
	proto.RegisterType((*CrawlResponse)(nil), "crawler.CrawlResponse")
}

func init() { proto.RegisterFile("crawler/crawler.proto", fileDescriptor_951b7949eb1aa3c9) }

var fileDescriptor_951b7949eb1aa3c9 = []byte{
	// 234 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x4f, 0x4d, 0x4b, 0x03, 0x31,
	0x10, 0xa5, 0x5a, 0xbb, 0x76, 0xd4, 0xcb, 0x48, 0xcb, 0xd2, 0x83, 0x94, 0x9e, 0x7a, 0xe9, 0x06,
	0xb7, 0x28, 0xe2, 0x4d, 0x7b, 0xf2, 0x1a, 0x6f, 0xde, 0xb2, 0x69, 0xdc, 0x2e, 0xb6, 0x9b, 0x98,
	0x49, 0x10, 0xfc, 0xf5, 0xd2, 0xd9, 0x2c, 0x48, 0x2f, 0x99, 0xf7, 0xc1, 0x23, 0xef, 0xc1, 0x44,
	0x7b, 0xf5, 0xb3, 0x37, 0x5e, 0xa4, 0x5b, 0x38, 0x6f, 0x83, 0xc5, 0x2c, 0xd1, 0xd9, 0xad, 0x72,
	0x8d, 0x20, 0xdb, 0xd6, 0xfc, 0x74, 0xee, 0xe2, 0x19, 0xae, 0x37, 0x47, 0x5f, 0x9a, 0xef, 0x68,
	0x28, 0xe0, 0x14, 0x46, 0x64, 0xa3, 0xd7, 0x26, 0x1f, 0xcc, 0x07, 0xcb, 0xb1, 0x4c, 0x0c, 0x11,
	0x86, 0xd1, 0xef, 0x29, 0x3f, 0x9b, 0x9f, 0x2f, 0xc7, 0x92, 0xf1, 0xe2, 0x0d, 0x6e, 0x52, 0x96,
	0x9c, 0x6d, 0xc9, 0x60, 0x0e, 0x19, 0x45, 0xad, 0x0d, 0x11, 0xa7, 0x2f, 0x65, 0x4f, 0xf1, 0x0e,
	0x86, 0x5b, 0x15, 0x14, 0xc7, 0xaf, 0x4a, 0x28, 0xb8, 0xc1, 0xbb, 0x6d, 0x6b, 0xc9, 0x7a, 0xf9,
	0x02, 0xd9, 0xa6, 0xab, 0x89, 0x8f, 0x70, 0xc1, 0x10, 0x27, 0x45, 0x3f, 0xe4, 0x7f, 0xc3, 0xd9,
	0xf4, 0x54, 0xee, 0x3e, 0x7f, 0xbd, 0xff, 0x10, 0x75, 0x13, 0x76, 0xb1, 0x2a, 0xb4, 0x3d, 0x88,
	0xb0, 0x53, 0xcd, 0xf6, 0x57, 0x35, 0xe5, 0xd3, 0x83, 0x38, 0xde, 0xd5, 0xc1, 0xad, 0x57, 0x3c,
	0xb9, 0x8a, 0x9f, 0xc2, 0x7d, 0xd5, 0xc2, 0x55, 0xd5, 0x88, 0x85, 0xf5, 0x5f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf1, 0x19, 0xa5, 0xc4, 0x3a, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CrawlerClient is the client API for Crawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrawlerClient interface {
	Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
}

type crawlerClient struct {
	cc *grpc.ClientConn
}

func NewCrawlerClient(cc *grpc.ClientConn) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := c.cc.Invoke(ctx, "/crawler.Crawler/Crawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlerServer is the server API for Crawler service.
type CrawlerServer interface {
	Crawl(context.Context, *CrawlRequest) (*CrawlResponse, error)
}

// UnimplementedCrawlerServer can be embedded to have forward compatible implementations.
type UnimplementedCrawlerServer struct {
}

func (*UnimplementedCrawlerServer) Crawl(ctx context.Context, req *CrawlRequest) (*CrawlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crawl not implemented")
}

func RegisterCrawlerServer(s *grpc.Server, srv CrawlerServer) {
	s.RegisterService(&_Crawler_serviceDesc, srv)
}

func _Crawler_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).Crawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/Crawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).Crawl(ctx, req.(*CrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crawler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crawl",
			Handler:    _Crawler_Crawl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crawler/crawler.proto",
}
