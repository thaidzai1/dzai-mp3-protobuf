// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: api/crawler/crawler.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CrawlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source string   `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Urls   []string `protobuf:"bytes,2,rep,name=urls,proto3" json:"urls,omitempty"`
}

func (x *CrawlRequest) Reset() {
	*x = CrawlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crawler_crawler_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlRequest) ProtoMessage() {}

func (x *CrawlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_crawler_crawler_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlRequest.ProtoReflect.Descriptor instead.
func (*CrawlRequest) Descriptor() ([]byte, []int) {
	return file_api_crawler_crawler_proto_rawDescGZIP(), []int{0}
}

func (x *CrawlRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *CrawlRequest) GetUrls() []string {
	if x != nil {
		return x.Urls
	}
	return nil
}

type CrawlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool    `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message string  `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data    []*Song `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *CrawlResponse) Reset() {
	*x = CrawlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_crawler_crawler_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CrawlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CrawlResponse) ProtoMessage() {}

func (x *CrawlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_crawler_crawler_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CrawlResponse.ProtoReflect.Descriptor instead.
func (*CrawlResponse) Descriptor() ([]byte, []int) {
	return file_api_crawler_crawler_proto_rawDescGZIP(), []int{1}
}

func (x *CrawlResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CrawlResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CrawlResponse) GetData() []*Song {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_api_crawler_crawler_proto protoreflect.FileDescriptor

var file_api_crawler_crawler_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x65, 0x72, 0x1a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6f, 0x6e, 0x67, 0x2f, 0x73,
	0x6f, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x0c, 0x43, 0x72, 0x61,
	0x77, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x72, 0x6c, 0x73, 0x22, 0x63, 0x0a, 0x0d, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x73, 0x6f, 0x6e, 0x67, 0x2e,
	0x53, 0x6f, 0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x41, 0x0a, 0x07, 0x43, 0x72,
	0x61, 0x77, 0x6c, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x05, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x12, 0x15,
	0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x65, 0x72, 0x2e,
	0x43, 0x72, 0x61, 0x77, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3a, 0x5a,
	0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x61, 0x69,
	0x64, 0x7a, 0x61, 0x69, 0x32, 0x38, 0x35, 0x2f, 0x64, 0x7a, 0x61, 0x69, 0x2d, 0x6d, 0x70, 0x33,
	0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_api_crawler_crawler_proto_rawDescOnce sync.Once
	file_api_crawler_crawler_proto_rawDescData = file_api_crawler_crawler_proto_rawDesc
)

func file_api_crawler_crawler_proto_rawDescGZIP() []byte {
	file_api_crawler_crawler_proto_rawDescOnce.Do(func() {
		file_api_crawler_crawler_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_crawler_crawler_proto_rawDescData)
	})
	return file_api_crawler_crawler_proto_rawDescData
}

var file_api_crawler_crawler_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_api_crawler_crawler_proto_goTypes = []interface{}{
	(*CrawlRequest)(nil),  // 0: crawler.CrawlRequest
	(*CrawlResponse)(nil), // 1: crawler.CrawlResponse
	(*Song)(nil),          // 2: song.Song
}
var file_api_crawler_crawler_proto_depIdxs = []int32{
	2, // 0: crawler.CrawlResponse.data:type_name -> song.Song
	0, // 1: crawler.Crawler.Crawl:input_type -> crawler.CrawlRequest
	1, // 2: crawler.Crawler.Crawl:output_type -> crawler.CrawlResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_api_crawler_crawler_proto_init() }
func file_api_crawler_crawler_proto_init() {
	if File_api_crawler_crawler_proto != nil {
		return
	}
	file_api_song_song_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_crawler_crawler_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_crawler_crawler_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CrawlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_crawler_crawler_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_crawler_crawler_proto_goTypes,
		DependencyIndexes: file_api_crawler_crawler_proto_depIdxs,
		MessageInfos:      file_api_crawler_crawler_proto_msgTypes,
	}.Build()
	File_api_crawler_crawler_proto = out.File
	file_api_crawler_crawler_proto_rawDesc = nil
	file_api_crawler_crawler_proto_goTypes = nil
	file_api_crawler_crawler_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CrawlerClient is the client API for Crawler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CrawlerClient interface {
	Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error)
}

type crawlerClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlerClient(cc grpc.ClientConnInterface) CrawlerClient {
	return &crawlerClient{cc}
}

func (c *crawlerClient) Crawl(ctx context.Context, in *CrawlRequest, opts ...grpc.CallOption) (*CrawlResponse, error) {
	out := new(CrawlResponse)
	err := c.cc.Invoke(ctx, "/crawler.Crawler/Crawl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlerServer is the server API for Crawler service.
type CrawlerServer interface {
	Crawl(context.Context, *CrawlRequest) (*CrawlResponse, error)
}

// UnimplementedCrawlerServer can be embedded to have forward compatible implementations.
type UnimplementedCrawlerServer struct {
}

func (*UnimplementedCrawlerServer) Crawl(context.Context, *CrawlRequest) (*CrawlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Crawl not implemented")
}

func RegisterCrawlerServer(s *grpc.Server, srv CrawlerServer) {
	s.RegisterService(&_Crawler_serviceDesc, srv)
}

func _Crawler_Crawl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrawlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlerServer).Crawl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawler.Crawler/Crawl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlerServer).Crawl(ctx, req.(*CrawlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crawler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "crawler.Crawler",
	HandlerType: (*CrawlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Crawl",
			Handler:    _Crawler_Crawl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/crawler/crawler.proto",
}
